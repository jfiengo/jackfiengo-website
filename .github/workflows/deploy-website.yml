name: Deploy Website

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:
    name: Build and Deploy to S3
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./website

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './website/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint
        continue-on-error: true

      - name: Build React app
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform (for outputs)
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.0
          terraform_wrapper: false

      - name: Get Terraform outputs
        id: terraform
        working-directory: ./terraform
        run: |
          terraform init -backend-config=backend/backend.tfvars
          echo "bucket_name=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "distribution_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT

      - name: Sync files to S3 (excluding index.html)
        run: |
          aws s3 sync dist/ s3://${{ steps.terraform.outputs.bucket_name }}/ \
            --delete \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "index.html"

      - name: Upload index.html with no-cache
        run: |
          aws s3 cp dist/index.html s3://${{ steps.terraform.outputs.bucket_name }}/index.html \
            --cache-control "public, max-age=0, must-revalidate"

      - name: Invalidate CloudFront cache
        run: |
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id ${{ steps.terraform.outputs.distribution_id }} \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)
          echo "CloudFront invalidation created: $INVALIDATION_ID"

      - name: Deployment summary
        run: |
          echo "Deployment complete!"
          echo "Website URL: https://jackfiengo.com"
          echo "Note: CloudFront invalidation may take a few minutes to complete."
